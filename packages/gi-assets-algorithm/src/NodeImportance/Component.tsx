//@ts-nocheck
/**
 * author:shiwu.wyy@antgroup.com
 */

import { DeleteOutlined } from '@ant-design/icons';
import Algorithm from '@antv/algorithm';
import { useContext } from '@antv/gi-sdk';
import { Button, Checkbox, Col, Form, Radio, Row, Tabs, Tooltip } from 'antd';
import React, { useEffect, useState } from 'react';
import './index.less';
import PropertyContent from './propertyContent';
import { locale, MappingWay, NodeImportanceProps } from './registerMeta';
import ResultPlot from './resultPlot';
import ResultTable from './resultTable';
import { fittingString } from './util';
import * as brain from 'brain.js';

import { useImmer } from "use-immer";

// 计算 data 里的每个节点的真实度数, 返回一个 node.id: { in, out } 的映射, 并缓存, 在没有更新图数据之前再次进入不再计算
const getDegreeMap = (data, degreeMap) => {
    if (degreeMap) {
        return degreeMap;
    }
    const reCalcDegreeMap = {};
    data.nodes.forEach(node => {
        reCalcDegreeMap[node.id] = {
            in: 0,
            out: 0,
        };
    });
    data.edges.forEach(edge => {
        reCalcDegreeMap[edge.source].out += 1;
        reCalcDegreeMap[edge.target].in += 1;
    });
    return reCalcDegreeMap;
};


// 创建一个神经网络模型实例
const net = new brain.NeuralNetwork({ hiddenLayers: [3] });
const Data = [
    { input: [0, 0], output: [0] },
    { input: [0, 1], output: [1] },
    { input: [1, 0], output: [1] },
    { input: [1, 1], output: [0] }
];
const dataBrain = [{ "input": [0.7, 1, 1, 0.147208122, 0.71, 0, 0.6, 0.4, 0.5, 0, 0.2, 0.2, 0.6, 0.1, 0, 1, 1, 0, 0.38, 0.939393939, 0.1, 0.6], "output": [0.06] },
{ "input": [0.3, 1, 1, 0.52284264, 0.84, 0, 0, 1, 0.7, 0, 0.7, 0.5, 0.8, 0, 0.6, 1, 1, 0.6, 0.56, 0.727272727, 0.7, 0.3], "output": [0.54] },
{ "input": [0.2, 1, 1, 0.172588832, 0.92, 0, 0.5, 0.5, 0.3, 1, 0.1, 0, 1, 0.5, 1, 1, 1, 1, 0.54, 0.383838384, 0.8, 0.1], "output": [0.16] },
{ "input": [0.7, 2, 1, 0.172588832, 0.405, 0, 0, 1, 0.1, 0, 0.9, 0.6, 0.9, 0.6, 0.6, 0, 1, 0.8, 1, 0.858585859, 0.65, 0.6], "output": [0.9] },
{ "input": [0, 2, 1, 0.197969543, 0.775, 0, 0.4, 0.6, 1, 0, 0.6, 0.1, 0.7, 0.2, 0.9, 1, 0, 0.4, 0.12, 0.363636364, 0.3, 0.8], "output": [0.44] },
{ "input": [0.8, 2, 1, 0.111675127, 0.425, 0, 0, 1, 0.2, 1, 0.5, 0.1, 0.6, 0.6, 0.4, 1, 1, 0.4, 0.76, 0.818181818, 0.2, 0.5], "output": [0.94] },
{ "input": [0.2, 2, 1, 0.791878173, 0.555, 0, 0.8, 0.2, 0.1, 0, 1, 0.2, 0.2, 0.2, 0.9, 0, 0, 1, 0.92, 0.555555556, 0.1, 0.4], "output": [0.46] },
{ "input": [0.2, 2, 1, 0.61928934, 0.75, 0, 0.7, 0.3, 0.4, 1, 0.6, 0.3, 0.5, 0, 0.9, 0, 1, 1, 0.44, 0.939393939, 0.3, 0.2], "output": [0.5] },
{ "input": [0.7, 2, 1, 0.852791878, 0.115, 0, 0.7, 0.3, 0, 1, 0.1, 0.1, 0.8, 0.1, 0.3, 1, 0, 0.4, 0.82, 0.838383838, 0.1, 0.7], "output": [0.7] },
{ "input": [0.1, 1, 1, 0.746192893, 0.745, 0, 0, 1, 0, 0, 1, 0.2, 0.9, 0.6, 0.2, 1, 0, 1, 0.78, 0.060606061, 0.3, 0], "output": [0.12] },
{ "input": [0.3, 2, 1, 0.456852792, 0.75, 0, 0, 1, 0.7, 0, 0.2, 0, 0.3, 0.4, 0.7, 1, 0, 1, 0.26, 0.01010101, 0.65, 0.7], "output": [0.8] },
{ "input": [0.6, 3, 1, 0.040609137, 0.04, 0, 0, 1, 1, 0, 0.1, 0.1, 0.6, 0.2, 0.7, 0, 1, 0.4, 0.96, 0.343434343, 0.9, 0.2], "output": [0.98] },
{ "input": [0.3, 3, 1, 0.670050761, 0.735, 0, 0.6, 0.4, 0.1, 0, 0.9, 0.5, 0.8, 0.4, 0.6, 1, 1, 1, 1, 0.97979798, 0.65, 0.5], "output": [0.84] },
{ "input": [0, 3, 1, 0.223350254, 0.12, 0, 0.4, 0.6, 0.3, 1, 0.2, 0.2, 0, 0.4, 0, 1, 1, 0.6, 0.4, 0.03030303, 0.85, 0.6], "output": [0.38] },
{ "input": [0.3, 1, 1, 0.685279188, 0.125, 0, 0.1, 0.9, 0.2, 0, 1, 0.9, 0, 0.1, 0.7, 0, 1, 0.8, 0.4, 0.737373737, 0.05, 0.5], "output": [0.3] },
{ "input": [0.4, 3, 1, 0.345177665, 0.6, 0, 0.5, 0.5, 0.7, 0, 0.5, 0.3, 0.9, 0.9, 0, 0, 0, 0.6, 0, 0.131313131, 0.4, 1], "output": [0.16] },
{ "input": [0.2, 3, 1, 1, 0.115, 0, 0.4, 0.6, 0.1, 0, 0.6, 0.5, 0.8, 0.8, 0.9, 1, 1, 0.8, 0.98, 0.111111111, 0.05, 0], "output": [0.7] },
{ "input": [0.7, 1, 1, 0.187817259, 0.825, 0, 0.1, 0.9, 0.7, 0, 0.6, 0.5, 0.4, 0.3, 0.6, 0, 0, 0.4, 0.92, 0.252525253, 0.85, 1], "output": [0.8] },
{ "input": [0.3, 3, 1, 0.228426396, 0.28, 0, 0.9, 0.1, 0.7, 0, 0.2, 0.1, 0.4, 0.4, 0.6, 1, 1, 1, 0.68, 0.424242424, 0.75, 0.5], "output": [0.2] },
{ "input": [1, 1, 1, 0.497461929, 0.83, 0, 0.9, 0.1, 1, 0, 0.9, 0, 0.2, 0.8, 0.8, 1, 1, 1, 0.56, 0.545454545, 0.5, 0.3], "output": [0.86] },
{ "input": [0.8, 1, 1, 0.583756345, 0.52, 0, 0.4, 0.6, 0.2, 1, 0.2, 0.1, 0.4, 0.9, 0.8, 0, 0, 1, 0.88, 0.646464646, 0.35, 0.5], "output": [0.7] },
{ "input": [0.1, 3, 1, 0.177664975, 0.635, 0, 0.9, 0.1, 0.3, 1, 0.8, 0.5, 0.5, 0.2, 0.2, 0, 0, 0.4, 0.88, 0.212121212, 0.15, 0.3], "output": [0.84] },
{ "input": [0.6, 3, 1, 0.512690355, 0.81, 0, 0.2, 0.8, 0.3, 1, 0.9, 0.2, 0.8, 0, 0.8, 0, 1, 0.8, 0.06, 0.888888889, 0.1, 0.7], "output": [0.54] },
{ "input": [0.6, 1, 1, 0.629441624, 0.86, 0, 0.2, 0.8, 0.1, 1, 0.8, 0, 0.8, 0.1, 0.1, 0, 1, 0.2, 0.34, 0.828282828, 0.55, 0.5], "output": [0.74] },
{ "input": [0.2, 2, 1, 0.923857868, 0.175, 0, 0.2, 0.8, 0.7, 1, 0.1, 0.1, 0.6, 0.8, 0.5, 1, 1, 0.6, 0.18, 0.555555556, 1, 0.3], "output": [0.94] },
{ "input": [0, 2, 1, 0.065989848, 0.38, 0, 0.8, 0.2, 1, 1, 0.5, 0.5, 0.2, 0.9, 0.7, 0, 1, 0.8, 0.16, 0.737373737, 0.15, 0.8], "output": [1] },
{ "input": [0.3, 1, 1, 0.827411168, 0.055, 0, 0.8, 0.2, 0.4, 1, 0.6, 0.4, 0.8, 0.2, 0.9, 1, 1, 0.6, 0.76, 0.242424242, 0.45, 0.4], "output": [0.34] },
{ "input": [0.8, 1, 1, 0.664974619, 0.36, 0, 0, 1, 0.2, 1, 0.7, 0.6, 0.9, 0.9, 1, 1, 0, 1, 0.7, 0.626262626, 0.35, 1], "output": [0.1] },
{ "input": [0.3, 3, 1, 0.583756345, 0.05, 0, 0, 1, 0.5, 1, 0.2, 0.2, 0.4, 1, 0.7, 0, 0, 0, 0.26, 0.272727273, 0.8, 0.4], "output": [0.08] },
{ "input": [1, 3, 1, 0.335025381, 0.385, 0, 0.4, 0.6, 0, 0, 0.8, 0.6, 0, 0.4, 0.8, 1, 1, 0.2, 0.72, 0.707070707, 0.6, 0.1], "output": [0.02] },
{ "input": [0.1, 2, 1, 0.060913706, 0.54, 0, 0.8, 0.2, 0.8, 0, 0.7, 0.4, 0.5, 0.5, 0.1, 1, 0, 1, 0.62, 0.282828283, 0.9, 0.9], "output": [0.38] },
{ "input": [0.6, 3, 1, 0.802030457, 0.195, 0, 0.2, 0.8, 0.3, 0, 0.5, 0, 0.6, 0.3, 0.9, 1, 1, 0.2, 0.7, 0.727272727, 0.15, 0.4], "output": [0.38] },
{ "input": [0.2, 3, 1, 0.258883249, 0.36, 0, 1, 0, 0.9, 1, 0.5, 0.1, 0.3, 1, 0.8, 1, 0, 1, 0.68, 0.414141414, 0.95, 0.1], "output": [0.6] },
{ "input": [0.4, 2, 1, 0.604060914, 0.535, 0, 0.4, 0.6, 1, 0, 0.6, 0.3, 0.2, 0.6, 0.2, 0, 0, 0.4, 0.7, 0.292929293, 0.9, 1], "output": [0.82] },
{ "input": [0.1, 3, 1, 0.756345178, 0.445, 0, 1, 0, 0.7, 1, 0.9, 0, 0.5, 0.8, 1, 1, 0, 0, 0.36, 0.161616162, 0.7, 0.9], "output": [0.34] },
{ "input": [0.1, 3, 1, 0.005076142, 0.64, 0, 0.7, 0.3, 0.4, 0, 0.8, 0.3, 0.2, 0.7, 0.7, 0, 0, 0, 0.9, 0.292929293, 0.1, 0.9], "output": [0.62] },
{ "input": [0.9, 1, 1, 0.868020305, 0.085, 0, 0.4, 0.6, 0.2, 0, 0.9, 0.5, 0.6, 0.8, 1, 0, 1, 1, 0.14, 0.878787879, 0.8, 0], "output": [0.18] },
{ "input": [0.7, 2, 1, 0.878172589, 0.27, 0, 0.1, 0.9, 0.2, 0, 0.5, 0.1, 0.5, 1, 0.9, 1, 1, 0.2, 0.1, 0.535353535, 0.4, 0.1], "output": [0.36] },
{ "input": [0.5, 1, 1, 0.299492386, 1, 0, 0.9, 0.1, 0.7, 1, 0.2, 0.2, 0.7, 0.2, 0.3, 0, 1, 0.2, 0.14, 0.535353535, 0.2, 0.9], "output": [0.26] },
{ "input": [0.5, 1, 1, 0.340101523, 0.785, 0, 0.8, 0.2, 0.3, 0, 0.2, 0.2, 0.2, 0.1, 1, 1, 1, 0.8, 0.08, 0.131313131, 0.7, 0], "output": [0.12] },
{ "input": [0.3, 1, 1, 0.045685279, 0.81, 0, 0.4, 0.6, 0.3, 1, 0, 0, 0.1, 0.5, 0.9, 0, 0, 0, 1, 0.333333333, 0.15, 0.1], "output": [0.16] },
{ "input": [1, 3, 1, 0.568527919, 0.115, 0, 1, 0, 1, 1, 0.9, 0, 0.5, 0.9, 0.9, 0, 1, 0.4, 0.4, 0.656565657, 0.05, 0.5], "output": [0.42] },
{ "input": [0.6, 2, 1, 0.111675127, 0.035, 0, 1, 0, 0.5, 1, 0.8, 0.2, 0.3, 0.9, 0.4, 1, 1, 1, 0.7, 0.252525253, 0.7, 0.8], "output": [0.24] },
{ "input": [0.1, 3, 1, 0.685279188, 0.26, 0, 0, 1, 0.8, 0, 0.6, 0.1, 0, 0, 0.1, 0, 1, 0, 0.82, 0.343434343, 0.85, 0.8], "output": [0.74] },
{ "input": [0, 3, 1, 0, 0.555, 0, 0, 1, 0.2, 1, 0.7, 0.7, 0.4, 0, 0.2, 1, 1, 0.6, 0, 0.111111111, 1, 0.2], "output": [0.76] },
{ "input": [0.7, 2, 1, 0.827411168, 0.54, 0, 0.9, 0.1, 0.2, 0, 0.8, 0.6, 0.1, 0.7, 0.4, 0, 1, 0.8, 0.3, 0.161616162, 0.1, 0.6], "output": [0.54] },
{ "input": [0.9, 1, 1, 0.416243655, 0.455, 0, 0, 1, 0.1, 0, 0.3, 0.1, 0.1, 0, 0.7, 1, 1, 0, 0.68, 0.616161616, 0.95, 0.6], "output": [0.6] },
{ "input": [0.7, 1, 1, 0.959390863, 0.63, 0, 0.6, 0.4, 0, 1, 0.5, 0.3, 0.5, 0.5, 0.5, 1, 0, 0, 0.22, 0.777777778, 0.15, 0.2], "output": [0.4] },
{ "input": [0, 3, 2, 0.111675127, 0.48, 1, 1, 0, 0.6, 1, 0.5, 0.9, 0.9, 0.7, 0.6, 1, 1, 0.2, 0.96, 0.121212121, 0.8, 0.3], "output": [0.54] },
{ "input": [0.5, 1, 2, 0.076142132, 0.37, 0, 0.9, 0.1, 0.3, 1, 0.9, 0, 0.8, 0.2, 0.6, 1, 1, 1, 0.86, 0.949494949, 0.6, 0], "output": [0.06] },
{ "input": [0.7, 1, 2, 0.314720812, 0.88, 0, 0.8, 0.2, 0, 1, 1, 0.4, 0, 0.2, 1, 1, 1, 1, 0.56, 0.02020202, 0.7, 0.7], "output": [0.22] },
{ "input": [1, 3, 2, 0.92893401, 0.21, 0, 0.8, 0.2, 0.6, 1, 0.7, 0.2, 0.3, 0.2, 0, 1, 1, 0.4, 0.04, 0.838383838, 0.85, 0.9], "output": [0.04] },
{ "input": [0.3, 2, 2, 0.54822335, 0.8, 0, 0.5, 0.5, 0.5, 1, 0.9, 0.3, 1, 0.1, 0.9, 1, 1, 0.4, 0.88, 0.101010101, 0.65, 0.4], "output": [0.04] },
{ "input": [0.6, 1, 2, 0.598984772, 0.765, 0, 0.2, 0.8, 0.6, 1, 0.1, 0, 1, 0.2, 0.4, 1, 1, 0.4, 0.5, 0.383838384, 0.3, 0.3], "output": [0.48] },
{ "input": [0.5, 2, 2, 0.862944162, 0.505, 0, 0.8, 0.2, 0.9, 1, 1, 0.1, 0.5, 0.4, 0.6, 1, 1, 0.4, 0.14, 0.494949495, 1, 0.3], "output": [0.46] },
{ "input": [1, 1, 2, 0.730964467, 0.025, 0, 0.5, 0.5, 0.4, 1, 0.2, 0.9, 0.1, 0.7, 0.8, 1, 1, 0.4, 0.36, 0.777777778, 1, 0], "output": [1] },
{ "input": [0.9, 3, 2, 0.192893401, 0.14, 0, 0.3, 0.7, 0.4, 1, 1, 0, 0.9, 0.6, 0.7, 1, 1, 0.8, 0.38, 0.313131313, 0.65, 0.3], "output": [0.14] },
{ "input": [1, 2, 2, 0.304568528, 0.78, 0, 0.7, 0.3, 0.3, 1, 0.4, 1, 0.6, 0.3, 0.3, 1, 1, 1, 0, 0.313131313, 0.2, 0.7], "output": [0.9] },
{ "input": [0.3, 3, 2, 0.92893401, 0.17, 0, 0.6, 0.4, 1, 1, 0.8, 0.9, 0.2, 0, 0.4, 1, 1, 0.2, 0.42, 0.888888889, 0.1, 0.2], "output": [0.2] },
{ "input": [0.6, 1, 2, 0.431472081, 0.315, 0, 0.3, 0.7, 0.1, 1, 0.3, 0.2, 0.5, 0.8, 0.9, 1, 1, 0.4, 0.78, 0.232323232, 0, 0], "output": [0.36] },
{ "input": [0.4, 2, 2, 0.741116751, 0.855, 0, 0.8, 0.2, 0.4, 1, 0.2, 0.7, 0.1, 0.7, 0.3, 1, 1, 1, 0.58, 0.212121212, 0.95, 0.1], "output": [0.2] },
{ "input": [0.1, 3, 2, 0.85786802, 0.675, 0, 0.6, 0.4, 0.4, 1, 0, 0.6, 0.9, 0.8, 0.3, 1, 1, 0.8, 0.66, 0.484848485, 0.05, 0.8], "output": [0.26] },
{ "input": [0.1, 2, 2, 0.949238579, 0.71, 0, 1, 0, 1, 1, 0.4, 0.5, 0.8, 0.4, 1, 1, 1, 0.6, 0.04, 0.616161616, 0.85, 0.8], "output": [0.58] },
{ "input": [0, 2, 2, 0.83248731, 0.82, 0, 0, 1, 0.7, 1, 0, 0.2, 0.3, 0.9, 0.6, 1, 1, 0.6, 0.24, 0.696969697, 0.45, 0.5], "output": [0.82] },
{ "input": [0.9, 3, 2, 0.126903553, 0.89, 0, 0.7, 0.3, 0.3, 1, 0.6, 0.8, 0.7, 1, 0.8, 1, 1, 0.6, 0.74, 0.383838384, 0.35, 0.8], "output": [0.92] },
{ "input": [0.5, 2, 2, 0.406091371, 0.61, 0, 0.2, 0.8, 0.5, 1, 0.1, 0.8, 0.8, 0.8, 0.1, 1, 1, 0.2, 0.96, 0.282828283, 0.7, 0.8], "output": [0.12] },
{ "input": [1, 2, 2, 0.025380711, 0.815, 0, 0.7, 0.3, 0.2, 1, 0.1, 0.5, 0.2, 0.5, 0.3, 1, 1, 0.2, 0.84, 0.757575758, 0, 0.4], "output": [0.3] },
{ "input": [0.8, 2, 2, 0.974619289, 0.12, 0, 0.1, 0.9, 0.2, 1, 0.2, 0.4, 0.2, 1, 0.4, 1, 1, 0.6, 0.66, 0.636363636, 0.45, 0.9], "output": [0.14] },
{ "input": [0.8, 2, 2, 0.939086294, 0.91, 0, 0.9, 0.1, 0.2, 1, 0.4, 0.9, 0.5, 0.5, 0.5, 1, 1, 0.4, 0.96, 0.787878788, 0.2, 0.1], "output": [0.56] },
{ "input": [0.1, 2, 2, 0.086294416, 0.725, 0, 0.6, 0.4, 0.5, 1, 0.8, 0.9, 0.3, 0.1, 0.4, 1, 1, 0, 1, 0.323232323, 0.9, 1], "output": [0.12] },
{ "input": [0.9, 2, 2, 0.573604061, 0.14, 0, 0, 1, 0.3, 1, 0.7, 0.6, 0, 0.2, 1, 1, 1, 0.6, 0.32, 0.595959596, 0.55, 0.6], "output": [0.16] },
{ "input": [0.9, 3, 2, 0.243654822, 0.85, 0, 0.8, 0.2, 0.2, 1, 0.8, 0.6, 0.5, 0.5, 0.1, 1, 1, 0.4, 0.18, 0.434343434, 0.05, 0.3], "output": [0.98] },
{ "input": [0.6, 3, 2, 0.203045685, 0.6, 0, 1, 0, 0, 1, 0.3, 0.9, 0, 0.2, 0.2, 1, 1, 0.6, 0.66, 0.797979798, 0.8, 0.9], "output": [0.68] },
{ "input": [0.6, 1, 2, 0.467005076, 0.56, 0, 0.4, 0.6, 1, 1, 0, 0.2, 1, 0.6, 0.1, 1, 1, 0, 0.44, 0.121212121, 0.85, 0.1], "output": [0.88] },
{ "input": [0.1, 2, 2, 0.228426396, 0.525, 0, 0.4, 0.6, 0.4, 1, 0.4, 0.9, 0.1, 0.7, 0.6, 1, 1, 0.4, 0.06, 0.272727273, 1, 0.3], "output": [0.62] },
{ "input": [1, 3, 2, 0.218274112, 0.03, 0, 0.2, 0.8, 0.3, 1, 0, 0.2, 0.4, 0.2, 0.3, 1, 1, 0, 0, 0.97979798, 0.9, 0.7], "output": [0.92] },
{ "input": [0.9, 1, 2, 0.461928934, 0.035, 0, 0.9, 0.1, 0.1, 1, 0.6, 0.7, 1, 0, 0.8, 1, 1, 0.2, 0.54, 0.191919192, 1, 0.9], "output": [0.38] },
{ "input": [0.4, 3, 2, 0.360406091, 0.005, 0, 0.6, 0.4, 0.3, 1, 0.5, 0.6, 0.5, 0.6, 0.7, 1, 1, 0, 0.16, 0.272727273, 0.55, 0.3], "output": [0.9] },
{ "input": [0.5, 1, 2, 0.705583756, 0.44, 0, 0.4, 0.6, 0.7, 1, 0.3, 0.1, 1, 0.4, 0.3, 1, 1, 1, 0.72, 0.212121212, 0.2, 0.9], "output": [0.02] },
{ "input": [0.1, 1, 2, 0.954314721, 0.94, 0, 0, 1, 0.3, 1, 1, 0.8, 0.6, 0.1, 1, 1, 1, 0.2, 0.32, 0.323232323, 0.55, 0.1], "output": [0.88] },
{ "input": [0.6, 1, 2, 0.878172589, 0.745, 0, 0.2, 0.8, 0.8, 1, 0.4, 0.7, 1, 1, 0.5, 1, 1, 0, 0.78, 0.616161616, 0.35, 0.5], "output": [0.12] },
{ "input": [0.9, 2, 2, 0.934010152, 0.54, 0, 1, 0, 0.4, 1, 0.7, 0.8, 1, 0.5, 0.9, 1, 1, 1, 0.82, 0.787878788, 0.3, 0.1], "output": [0.06] },
{ "input": [1, 1, 2, 0.538071066, 0.445, 0, 0.7, 0.3, 0.7, 1, 0.2, 0.8, 0.7, 0.8, 0.4, 1, 1, 0.6, 0.4, 0.181818182, 1, 0.8], "output": [0.26] },
{ "input": [0.8, 3, 2, 0.92893401, 0.445, 0, 0.9, 0.1, 0.3, 1, 0, 0.7, 0.5, 0, 0, 1, 1, 0.8, 0.72, 0.717171717, 0.8, 0.5], "output": [0.48] },
{ "input": [0.9, 3, 2, 0.182741117, 0.005, 0, 0.2, 0.8, 0.2, 1, 0.4, 0.7, 0, 0, 0.4, 1, 1, 0.4, 0.96, 0.333333333, 0.95, 0.1], "output": [1] },
{ "input": [0.9, 1, 2, 0.725888325, 0.88, 0, 0.2, 0.8, 0.8, 1, 0.7, 0.6, 0.9, 0.6, 0.7, 1, 1, 0.6, 0.72, 0.02020202, 0, 0], "output": [0.92] },
{ "input": [0.4, 3, 2, 0.263959391, 0.055, 0, 0.4, 0.6, 0.2, 1, 0.9, 1, 0.6, 0.6, 0.7, 1, 1, 0.8, 0.38, 0.595959596, 0.8, 0.7], "output": [1] },
{ "input": [0.9, 2, 2, 0.197969543, 0.445, 0, 0.7, 0.3, 0.7, 1, 0.6, 0.5, 0.6, 0.1, 0.5, 1, 1, 0.2, 0.46, 0.191919192, 0.9, 0.3], "output": [0.32] },
{ "input": [0.4, 3, 2, 0.827411168, 0.48, 0, 0.8, 0.2, 0.8, 1, 0.3, 0, 0.4, 0.7, 0.7, 1, 1, 0, 0.14, 0.474747475, 0.7, 0], "output": [0.02] },
{ "input": [0.5, 3, 2, 0.329949239, 0.285, 0, 0.8, 0.2, 0.1, 1, 0.6, 0.4, 0.1, 0.8, 0.7, 1, 1, 0.6, 0.12, 0.525252525, 0.85, 0.8], "output": [0.12] },
{ "input": [0.3, 2, 2, 0.411167513, 0.115, 0, 0.9, 0.1, 0.8, 1, 0, 0.3, 0.2, 0.9, 0.5, 1, 1, 0.8, 0.8, 0.414141414, 0.1, 0], "output": [0.4] },
{ "input": [0.3, 1, 2, 0.893401015, 0.8, 0, 0.5, 0.5, 0.4, 1, 0.9, 0.7, 0.5, 0, 1, 1, 1, 0, 0.5, 0.151515152, 0.6, 0.9], "output": [0.8] },
{ "input": [0.1, 1, 2, 0.426395939, 0.45, 0, 0.6, 0.4, 1, 1, 0, 0.2, 0.1, 0.8, 0.2, 1, 1, 0, 0.82, 0.101010101, 0.2, 1], "output": [0.24] },
{ "input": [1, 1, 2, 0.335025381, 0.17, 0, 0.4, 0.6, 0.3, 1, 0.6, 0, 0, 0.5, 0.6, 1, 1, 0.6, 0.7, 0.171717172, 0.05, 0.8], "output": [0.52] },
{ "input": [0.2, 1, 2, 0.441624365, 0.73, 0, 0.1, 0.9, 0.6, 1, 0.1, 0.6, 0.3, 0.6, 0.4, 1, 1, 0, 0.22, 0.080808081, 0.65, 0.1], "output": [0.66] },
{ "input": [0.5, 3, 2, 0.121827411, 0.59, 0, 0.8, 0.2, 0.1, 1, 0.2, 1, 0.7, 0.5, 0.9, 1, 1, 1, 0.6, 0.323232323, 0.35, 0.4], "output": [0.14] },
{ "input": [0.5, 2, 2, 0.416243655, 0.78, 0, 0.4, 0.6, 0.4, 1, 0.6, 0, 0.2, 0.1, 0.9, 1, 1, 0.4, 0.72, 0.101010101, 0.65, 0.7], "output": [0.28] },
{ "input": [0.1, 2, 2, 0.873096447, 0.685, 0, 0.8, 0.2, 0.8, 1, 0.9, 0.1, 0, 0.4, 0.4, 1, 1, 0.6, 0.74, 0.060606061, 0.1, 0.6], "output": [0.68] },
{ "input": [0.4, 1, 2, 0.274111675, 0.77, 0, 0.9, 0.1, 0.6, 1, 0.3, 0.5, 0, 0, 0.7, 1, 1, 0.8, 0.24, 0.171717172, 0.05, 0.7], "output": [0.96] },
{ "input": [0, 3, 2, 0.38071066, 0.135, 0, 0.4, 0.6, 0.9, 1, 0.2, 0.4, 0.7, 0, 0.3, 1, 1, 1, 0.84, 0.787878788, 0.75, 0.3], "output": [0.54] },
{ "input": [0.3, 2, 3, 0.578680203, 0.54, 0, 0.5, 0.5, 0.1, 1, 0.7, 0.7, 0.4, 0.2, 0.3, 1, 1, 1, 0.62, 0.707070707, 0.2, 0.3], "output": [0.88] },
{ "input": [0.9, 3, 3, 0.025380711, 0.805, 0, 0.5, 0.5, 0.2, 1, 0, 0.2, 0.3, 0.3, 0.1, 1, 1, 0.2, 0.92, 0.343434343, 0.95, 0.8], "output": [0.84] },
{ "input": [1, 2, 3, 0.532994924, 0.945, 0, 0.6, 0.4, 1, 1, 0.7, 0.3, 0.4, 0.6, 0, 1, 1, 0.2, 0.78, 0.757575758, 0.2, 0], "output": [0.84] },
{ "input": [0.5, 1, 3, 0.730964467, 0, 0, 0.1, 0.9, 0.7, 1, 0.1, 0.9, 0.4, 0.7, 0.1, 1, 1, 1, 0.18, 0.131313131, 0.4, 0.9], "output": [0.62] },
{ "input": [1, 1, 3, 0.111675127, 0.87, 0, 0.7, 0.3, 0.2, 1, 0.9, 0.7, 0, 0.8, 0.8, 1, 1, 0.8, 0.66, 0.949494949, 0.5, 0.6], "output": [0.68] },
{ "input": [0, 1, 3, 0.461928934, 0.045, 0, 1, 0, 0.9, 1, 0.1, 0, 0, 0.9, 0.8, 1, 1, 0.6, 0.84, 0.262626263, 0.5, 0], "output": [0.2] },
{ "input": [0.9, 1, 3, 0.23857868, 0, 0, 0.7, 0.3, 0.9, 1, 0.1, 0.5, 0.2, 1, 0.9, 1, 1, 0.2, 0.26, 0.070707071, 0.8, 1], "output": [0.02] },
{ "input": [0.2, 3, 3, 0.83248731, 0.985, 0, 0.9, 0.1, 0.9, 1, 0.1, 1, 0.1, 0.9, 0.4, 1, 1, 0.6, 0.42, 0.212121212, 0.4, 0.6], "output": [0.92] },
{ "input": [0.3, 1, 3, 0.720812183, 0.06, 0, 0.6, 0.4, 0.4, 1, 0.2, 0.3, 0.5, 0, 0.5, 1, 1, 0.2, 0.82, 0.383838384, 0.6, 0.1], "output": [0.88] },
{ "input": [1, 3, 3, 0.228426396, 0.335, 0, 0.1, 0.9, 0.2, 1, 0.3, 0.5, 0.1, 0.4, 0.2, 1, 1, 1, 0.72, 0.272727273, 0.9, 1], "output": [0.16] },
{ "input": [1, 1, 3, 0.015228426, 0.27, 0, 0.5, 0.5, 1, 1, 0.4, 0.2, 0.6, 0.6, 0.2, 1, 1, 1, 0.72, 0.01010101, 0.85, 0], "output": [0.44] },
{ "input": [0.2, 3, 3, 0.512690355, 0.235, 0, 0.4, 0.6, 0.1, 1, 0.7, 0.4, 0.2, 0, 0.9, 1, 1, 0.6, 0.74, 0.333333333, 0.9, 0], "output": [0] },
{ "input": [0, 3, 3, 0.005076142, 0.32, 0, 0.9, 0.1, 0, 1, 0.5, 0, 0.7, 1, 0.6, 1, 1, 1, 0.72, 0.474747475, 0.3, 0.8], "output": [0.16] },
{ "input": [0.7, 2, 3, 0.78680203, 0.035, 0, 0.3, 0.7, 0.4, 1, 0.2, 0.5, 0.6, 0, 0.5, 1, 1, 0.6, 0.28, 0.858585859, 0.1, 1], "output": [0.26] },
{ "input": [0.1, 2, 3, 0.218274112, 0.235, 0, 1, 0, 0.9, 1, 0.1, 0.9, 0.6, 0.8, 0.9, 1, 1, 1, 0.66, 0.808080808, 0, 0.6], "output": [0.28] },
{ "input": [0.7, 2, 3, 0.197969543, 0.54, 0, 0.6, 0.4, 0.5, 1, 0.4, 0, 0.4, 0, 0.1, 1, 1, 0.8, 0.98, 0.404040404, 0.95, 0.4], "output": [0] },
{ "input": [0.1, 2, 3, 0.035532995, 0.265, 0, 0.5, 0.5, 0.8, 1, 0.8, 0, 0.1, 0.4, 0.9, 1, 1, 1, 0.8, 0.070707071, 1, 0.9], "output": [0.14] },
{ "input": [0.5, 2, 3, 0.263959391, 0.75, 0, 0.6, 0.4, 0.5, 1, 0.3, 1, 0.7, 1, 1, 1, 1, 0, 0.84, 0.909090909, 0.2, 0.3], "output": [0.9] },
{ "input": [0.6, 2, 3, 0.355329949, 0.19, 0, 0.9, 0.1, 0.6, 1, 1, 0.4, 0.4, 1, 0.2, 1, 1, 0.2, 0.8, 0.818181818, 0, 0.3], "output": [0.42] },
{ "input": [1, 3, 3, 0.502538071, 0.195, 0, 0.7, 0.3, 0.6, 1, 0.2, 0.3, 0.2, 0.8, 0.4, 1, 1, 0.2, 0.26, 0.98989899, 0.75, 0.5], "output": [0.18] },
{ "input": [0.2, 1, 3, 0.634517766, 0.68, 0, 0.4, 0.6, 0.3, 1, 0.8, 0.8, 0.1, 0.2, 0.6, 1, 1, 0.6, 0.86, 0.555555556, 0.75, 0.4], "output": [0.56] },
{ "input": [0.5, 2, 3, 0.588832487, 0.405, 0, 0.8, 0.2, 0.2, 1, 0.2, 0.5, 0.1, 0.7, 0.4, 1, 1, 0.4, 0.9, 0.121212121, 0.8, 0.7], "output": [0.42] },
{ "input": [1, 1, 3, 0.680203046, 0.205, 0, 0.5, 0.5, 0.4, 1, 0.5, 0.8, 0.2, 0.4, 0, 1, 1, 1, 0.16, 0.090909091, 0.75, 0.4], "output": [0.14] },
{ "input": [0.7, 1, 3, 0.954314721, 0.675, 0, 0.7, 0.3, 0.1, 1, 0.3, 0.4, 0.4, 0.5, 0.6, 1, 1, 1, 0.28, 0.04040404, 0.8, 0.7], "output": [0.46] },
{ "input": [0.7, 1, 3, 0.964467005, 0.71, 0, 0.7, 0.3, 0.2, 1, 0.4, 0.7, 0.6, 0.8, 0.7, 1, 1, 1, 0.38, 0.111111111, 0.65, 0.6], "output": [0.18] },
{ "input": [0.1, 3, 3, 0.005076142, 0.225, 0, 0.9, 0.1, 0.2, 1, 0.7, 0.4, 0.3, 0.9, 0, 1, 1, 1, 0.92, 0.575757576, 0.25, 0.3], "output": [0.52] },
{ "input": [0.7, 1, 3, 0.395939086, 0.135, 0, 0.9, 0.1, 0.7, 1, 0.5, 0.3, 0.4, 1, 0.3, 1, 1, 0.8, 0.88, 0, 0.85, 0.6], "output": [0.92] },
{ "input": [0.1, 1, 3, 0.873096447, 0.3, 0, 0.8, 0.2, 0.6, 1, 0.3, 0.3, 0.5, 0.4, 0.5, 1, 1, 0, 0.9, 0.070707071, 0.1, 0.4], "output": [0.94] },
{ "input": [0.4, 1, 3, 0.187817259, 0.34, 0, 0, 1, 0.1, 1, 0.3, 0.9, 0.3, 0.2, 0.9, 1, 1, 0.2, 0.38, 0.878787879, 0.55, 0.1], "output": [0.34] },
{ "input": [0.6, 3, 3, 0.588832487, 0.045, 0, 0.8, 0.2, 0.6, 1, 0.3, 0.3, 0.7, 0.8, 0, 1, 1, 0, 0.04, 0.474747475, 0.25, 0.3], "output": [0.2] },
{ "input": [0, 3, 3, 0.223350254, 0.905, 0, 0.7, 0.3, 0.2, 1, 0, 0.3, 0.7, 0.5, 0, 1, 1, 1, 0.9, 0.181818182, 0.4, 0.3], "output": [0.32] },
{ "input": [0.8, 2, 3, 0.279187817, 0.73, 0, 0.6, 0.4, 0.2, 1, 0.9, 0.5, 0.8, 0.1, 0.3, 1, 1, 0.4, 0.84, 0.494949495, 0, 0.5], "output": [0.96] },
{ "input": [0.9, 2, 3, 0.83248731, 0.5, 0, 0.4, 0.6, 0.4, 1, 0.8, 0.7, 0.7, 0.2, 1, 1, 1, 0.6, 0.86, 0.535353535, 0.6, 0.9], "output": [0.78] },
{ "input": [0, 1, 3, 0.918781726, 0.055, 0, 0.3, 0.7, 0.8, 1, 0.4, 1, 0.4, 0.7, 0, 1, 1, 0.6, 0.24, 0.888888889, 0.3, 1], "output": [0.24] },
{ "input": [0.9, 1, 3, 0.390862944, 0.79, 0, 1, 0, 0.4, 1, 0.1, 1, 0.5, 0.9, 0, 1, 1, 1, 0.34, 0.434343434, 0.9, 0.8], "output": [0.68] },
{ "input": [1, 3, 3, 0.431472081, 0.915, 0, 0.3, 0.7, 0.6, 1, 0.1, 0.1, 0.2, 0.6, 0, 1, 1, 0.4, 0.52, 0.747474747, 0.45, 0.4], "output": [0.02] },
{ "input": [0, 1, 3, 0.218274112, 0.275, 0, 0.6, 0.4, 0.1, 1, 0.3, 0.1, 0, 0, 0.3, 1, 1, 0.6, 0.82, 0.313131313, 0.1, 0], "output": [0.28] },
{ "input": [0.5, 2, 3, 0.131979695, 0.62, 0, 0.2, 0.8, 0.1, 1, 0.6, 0.1, 0.4, 0.9, 0.8, 1, 1, 0.8, 0.36, 0.565656566, 0.65, 0.6], "output": [0.64] },
{ "input": [0.4, 1, 3, 0.370558376, 0.905, 0, 0.2, 0.8, 0.8, 1, 0.3, 0.7, 1, 0.2, 0.8, 1, 1, 0.2, 0.54, 0.626262626, 0.8, 0.5], "output": [0.64] },
{ "input": [0.2, 1, 3, 0.47715736, 0.76, 0, 0.9, 0.1, 0.1, 1, 0.9, 0.5, 0, 0.4, 0.2, 1, 1, 0.6, 0.7, 0.272727273, 0.1, 0], "output": [0.34] },
{ "input": [0, 2, 3, 0.751269036, 0.61, 0, 0.2, 0.8, 0.2, 1, 0, 0, 0.3, 0.1, 0.5, 1, 1, 0.4, 0.4, 0.303030303, 0.1, 0.9], "output": [0.34] },
{ "input": [0.8, 3, 3, 0.868020305, 0.795, 0, 0.2, 0.8, 0.5, 1, 0.6, 0.4, 0.4, 0.2, 0.7, 1, 1, 1, 0.12, 0.909090909, 0.15, 0.5], "output": [0.86] },
{ "input": [0.4, 1, 3, 0.710659898, 0.155, 0, 0.4, 0.6, 0.1, 1, 0.8, 1, 0.5, 0.8, 0.6, 1, 1, 0.4, 0.28, 0.878787879, 0.85, 0.3], "output": [0.98] },
{ "input": [0.1, 2, 3, 0.060913706, 0.265, 0, 1, 0, 0.6, 1, 0.5, 0.4, 0, 0.4, 0, 1, 1, 0.6, 0.08, 0.98989899, 0.65, 1], "output": [0.12] },
{ "input": [0.7, 3, 3, 0.157360406, 0.56, 0, 0, 1, 0.4, 1, 0.9, 0.2, 0.5, 0.7, 1, 1, 1, 0.4, 0.52, 0.767676768, 0.95, 0.4], "output": [0.62] },
{ "input": [0.8, 2, 3, 0.233502538, 0.335, 0, 1, 0, 0, 1, 0.8, 0.8, 1, 0.6, 1, 1, 1, 0.2, 0.48, 0.323232323, 0.15, 0.9], "output": [0.84] },
{ "input": [0.9, 2, 3, 0.461928934, 0.805, 0, 0.7, 0.3, 0.6, 1, 0.7, 0.4, 0.5, 0.6, 0.3, 1, 1, 0.6, 0.8, 0.353535354, 0, 1], "output": [0.66] },
{ "input": [0.9, 3, 3, 0.944162437, 0.685, 0, 0.8, 0.2, 0.9, 1, 0.1, 1, 0.6, 0.9, 0.2, 1, 1, 1, 0.24, 0.97979798, 0.9, 0.1], "output": [0.5] },
{ "input": [0, 1, 4, 0.573604061, 0.72, 1, 0.9, 0.1, 0.5, 0, 0.7, 0.6, 0.3, 0.1, 0.1, 1, 0, 0.2, 0.96, 0.04040404, 0.05, 0.4], "output": [0.58] },
{ "input": [0.8, 3, 4, 0.868020305, 0.2, 0, 0.6, 0.4, 1, 1, 0, 0, 0.1, 0.8, 0.6, 0, 0, 0.4, 0.44, 0.818181818, 0.75, 0.7], "output": [0.4] },
{ "input": [0.1, 2, 4, 0.421319797, 0.22, 0, 1, 0, 0.1, 0, 0.9, 0, 0, 0.6, 0.6, 1, 1, 0.6, 0.14, 0.97979798, 1, 0], "output": [0.98] },
{ "input": [0.4, 2, 4, 0.614213198, 0.655, 0, 1, 0, 0, 0, 1, 0.5, 0.4, 0.1, 0.3, 1, 1, 0.8, 0.24, 0.888888889, 0.3, 0.2], "output": [0.5] },
{ "input": [0.4, 2, 4, 0.964467005, 0.465, 0, 0.5, 0.5, 0.9, 1, 1, 0.3, 0.4, 0.5, 0.2, 0, 1, 1, 0.62, 0.050505051, 0.9, 0.3], "output": [0.92] },
{ "input": [0.4, 3, 4, 0.751269036, 0.955, 0, 0.8, 0.2, 0.3, 0, 0.5, 0.4, 0.2, 0.9, 0.1, 0, 1, 0.4, 0.56, 0.131313131, 0.55, 0.2], "output": [0.16] },
{ "input": [0, 2, 4, 0.532994924, 0.385, 0, 0.6, 0.4, 0.7, 0, 0.1, 0.1, 1, 0.9, 0.3, 0, 1, 0.6, 0.3, 0.393939394, 0.85, 0.6], "output": [0] },
{ "input": [1, 2, 4, 0.532994924, 0.56, 0, 0.1, 0.9, 0.8, 1, 0.1, 0, 0.8, 0, 0.2, 1, 1, 1, 0.82, 0.949494949, 0.15, 0.3], "output": [0.04] },
{ "input": [0.1, 1, 4, 0.335025381, 0.475, 0, 0.5, 0.5, 1, 1, 0.7, 0.5, 0.7, 0.3, 0, 1, 1, 1, 0.36, 0.111111111, 0.9, 0.4], "output": [0.96] },
{ "input": [0.1, 3, 4, 0.730964467, 0.07, 0, 0.9, 0.1, 0.8, 0, 0.2, 0, 1, 0.8, 0.1, 0, 1, 0, 0.5, 0.333333333, 0.95, 0.2], "output": [0.08] },
{ "input": [0.6, 2, 4, 0.233502538, 0.115, 0, 1, 0, 0.2, 1, 0.7, 0.5, 0.6, 0.8, 0, 0, 0, 0.2, 0.42, 0.636363636, 0.1, 0.5], "output": [0.92] },
{ "input": [0.8, 2, 4, 0.649746193, 0.885, 0, 0.7, 0.3, 0.2, 0, 0.3, 0.2, 1, 0.5, 1, 0, 0, 0.2, 0.78, 0.96969697, 0, 0.2], "output": [0.12] },
{ "input": [0.6, 3, 4, 0.416243655, 0.455, 0, 0.6, 0.4, 0.3, 0, 0.2, 0.2, 0.4, 0.2, 0.6, 0, 0, 0.4, 0.28, 0.656565657, 0.7, 0.2], "output": [0.12] },
{ "input": [0.9, 1, 4, 0.375634518, 0.935, 0, 0.4, 0.6, 0.5, 1, 0.5, 0.5, 0.3, 0.4, 0.2, 1, 1, 0.2, 0.94, 1, 0.7, 0.8], "output": [0.92] },
{ "input": [0.6, 3, 4, 0.852791878, 0.91, 0, 0.9, 0.1, 0.7, 0, 0.1, 0.1, 0.4, 0.2, 0.5, 1, 0, 0, 0.26, 0.787878788, 0, 0.7], "output": [0.42] },
{ "input": [0.8, 1, 4, 0.375634518, 0.95, 0, 0.9, 0.1, 0.1, 0, 0, 0, 0.8, 0.9, 0.5, 0, 1, 0.4, 0.48, 0.191919192, 0.75, 0.6], "output": [0.44] },
{ "input": [0.3, 3, 4, 0.862944162, 0.155, 0, 0.1, 0.9, 0.3, 1, 0.7, 0.4, 0.7, 0.2, 0.5, 0, 1, 0, 0.36, 0.474747475, 0.1, 0.6], "output": [0.06] },
{ "input": [0.5, 1, 4, 0.553299492, 0.34, 0, 0.7, 0.3, 1, 0, 0.5, 0, 0.4, 0, 0.3, 0, 0, 0, 0.74, 0.161616162, 0.6, 0.1], "output": [0.56] },
{ "input": [0.4, 3, 4, 0.121827411, 0.215, 0, 0.3, 0.7, 0.5, 1, 0.5, 0.2, 1, 1, 0.3, 1, 1, 0, 0.06, 0, 0.7, 1], "output": [0.98] },
{ "input": [0.9, 1, 4, 0.040609137, 0.88, 0, 0.4, 0.6, 0, 0, 0.9, 0, 0.9, 0.9, 0.9, 1, 1, 0.8, 0.9, 0.353535354, 0.4, 0.7], "output": [0.12] },
{ "input": [0.7, 3, 4, 0.507614213, 0.38, 0, 0.2, 0.8, 0, 1, 0, 0, 0.7, 0.7, 0.9, 1, 1, 0.6, 0.6, 0.212121212, 0.1, 0.6], "output": [0.74] },
{ "input": [0.3, 2, 4, 0.654822335, 0.355, 0, 1, 0, 0, 1, 0.1, 0.1, 0.8, 0.1, 0.6, 1, 0, 0.4, 0.78, 0.898989899, 0.95, 0.5], "output": [0.3] },
{ "input": [0.2, 2, 4, 0.467005076, 0.895, 0, 0.8, 0.2, 0.7, 1, 0, 0, 0, 0.1, 0.2, 0, 0, 1, 0.8, 0.727272727, 0.75, 0.5], "output": [0.7] },
{ "input": [0.6, 1, 4, 0.614213198, 0.325, 0, 0.1, 0.9, 0, 1, 0.5, 0.4, 0.9, 0.8, 0.1, 0, 0, 0.2, 0.32, 0.080808081, 0.05, 0.1], "output": [0.92] },
{ "input": [0.5, 3, 4, 0.020304569, 0.045, 0, 0, 1, 1, 1, 0, 0, 0.2, 0.6, 0, 0, 0, 1, 0.22, 0.393939394, 1, 0.3], "output": [0.7] },
{ "input": [0.4, 2, 4, 0.324873096, 0.635, 0, 1, 0, 0.3, 1, 0.4, 0.2, 0.8, 0.1, 0.3, 0, 0, 0, 0.98, 0.656565657, 0.1, 0.1], "output": [0.08] },
{ "input": [0.9, 2, 4, 0.908629442, 0.7, 0, 0.2, 0.8, 0.6, 1, 0.1, 0.1, 1, 0.5, 0.8, 1, 0, 0.8, 0.96, 0.737373737, 0.75, 0.6], "output": [0.16] },
{ "input": [0.5, 1, 4, 0.38071066, 0.2, 0, 0.2, 0.8, 0.4, 0, 0.3, 0.1, 0.1, 0, 0.5, 1, 0, 0.2, 0.06, 0.343434343, 0.7, 0.6], "output": [0.42] },
{ "input": [0.7, 2, 4, 0.385786802, 0.755, 0, 1, 0, 0.1, 1, 1, 0, 0.3, 0.7, 0.3, 1, 1, 0, 0.84, 0.282828283, 0.9, 0.7], "output": [0.2] },
{ "input": [0.1, 2, 4, 0.45177665, 0.555, 0, 0.3, 0.7, 0.2, 0, 0.9, 0.3, 0.5, 0.5, 0.2, 1, 1, 0.4, 0.82, 0.373737374, 0.25, 0.1], "output": [0.24] },
{ "input": [0.7, 3, 4, 0.670050761, 0.98, 0, 0.7, 0.3, 0.5, 0, 0.5, 0.5, 0, 0.6, 0.2, 0, 0, 0.4, 0.1, 0.474747475, 0.65, 0.2], "output": [0.08] },
{ "input": [0.3, 1, 4, 0.030456853, 0.67, 0, 0.1, 0.9, 0.3, 1, 0.2, 0.1, 0.3, 1, 0.3, 0, 1, 0.8, 0.46, 0.757575758, 1, 0.7], "output": [0.32] },
{ "input": [1, 2, 4, 0.659898477, 0.465, 0, 0, 1, 0.2, 1, 0.2, 0.2, 0.6, 0.8, 0.4, 1, 0, 0.2, 0.58, 0.383838384, 0.2, 0.2], "output": [0.1] },
{ "input": [0.6, 3, 4, 0.324873096, 0.445, 0, 0.2, 0.8, 1, 1, 0.1, 0, 0.6, 0.1, 0.2, 1, 0, 0.2, 0, 0.252525253, 1, 0.4], "output": [0.24] },
{ "input": [0.9, 1, 4, 0.025380711, 0.46, 0, 0.3, 0.7, 1, 1, 0, 0, 0.8, 0.5, 0.8, 1, 1, 0.8, 0.42, 0.828282828, 0.05, 0.9], "output": [0.76] },
{ "input": [0.8, 2, 4, 0.401015228, 0.505, 0, 0.1, 0.9, 0, 0, 0.4, 0.3, 0.5, 0.8, 0.7, 1, 0, 0, 0.22, 0.121212121, 0.1, 0.8], "output": [0.96] },
{ "input": [0.1, 1, 4, 0.807106599, 0.42, 0, 0.2, 0.8, 0.7, 1, 0, 0, 1, 0.7, 0.8, 1, 1, 0.2, 0.84, 0.333333333, 0.4, 0.6], "output": [0.58] },
{ "input": [0, 2, 4, 0.390862944, 0.575, 0, 0.2, 0.8, 0.8, 0, 0.4, 0, 0.7, 0.4, 1, 0, 1, 1, 0.8, 0.131313131, 0.7, 0.9], "output": [0.78] },
{ "input": [0.2, 2, 4, 0.411167513, 0.465, 0, 0, 1, 0.3, 1, 0.2, 0.2, 0.5, 1, 0.4, 1, 1, 0.2, 0.16, 0.757575758, 0.45, 0.3], "output": [0.72] },
{ "input": [0.4, 2, 4, 0.680203046, 0.805, 0, 0.6, 0.4, 0.7, 0, 0.2, 0, 0.2, 0.1, 0.8, 1, 0, 0.2, 0.92, 0.494949495, 1, 0.6], "output": [0] },
{ "input": [0, 3, 4, 0.385786802, 0.885, 0, 0.9, 0.1, 0.4, 1, 0.7, 0, 0.7, 0.9, 0.5, 1, 0, 1, 0.04, 0.909090909, 0.55, 0.4], "output": [0.36] },
{ "input": [0.2, 1, 4, 0.974619289, 0.795, 0, 1, 0, 0.4, 0, 0.1, 0.1, 0.1, 0.7, 0.2, 0, 1, 0, 0.64, 0.545454545, 0.15, 0.7], "output": [0.42] },
{ "input": [0.5, 3, 4, 0.741116751, 0.4, 0, 0.7, 0.3, 0.7, 1, 0, 0, 0.5, 0.8, 0.6, 0, 0, 0.6, 0.34, 0.090909091, 0.65, 0.7], "output": [0.34] },
{ "input": [0.9, 3, 4, 0.345177665, 0.675, 0, 0.2, 0.8, 0.9, 0, 1, 0.3, 0.8, 0.7, 0.2, 0, 0, 0.2, 0.76, 0.161616162, 0.65, 0.5], "output": [0.84] },
{ "input": [0.1, 1, 4, 0.375634518, 0.82, 0, 0.2, 0.8, 0.8, 0, 0.1, 0.1, 0.8, 0.8, 0.7, 1, 1, 1, 0.4, 0.95959596, 0.5, 0.7], "output": [0.54] },
{ "input": [0.5, 1, 4, 0.614213198, 0.265, 0, 0.2, 0.8, 0.2, 1, 0.2, 0.2, 0.9, 0.3, 0.3, 1, 1, 0, 0.56, 0.313131313, 0.2, 0.9], "output": [0.42] },
{ "input": [0.9, 2, 4, 0.289340102, 0.455, 0, 0.3, 0.7, 0.9, 0, 0.9, 0.2, 0.5, 0.2, 0.2, 1, 0, 1, 0.34, 0.101010101, 0.85, 0.2], "output": [0.56] },
{ "input": [0.3, 1, 4, 0.873096447, 0.635, 0, 0.6, 0.4, 0.2, 0, 0.2, 0.1, 0.3, 0.3, 0.1, 0, 1, 0, 0.44, 0.181818182, 0.15, 0.1], "output": [0.76] },
{ "input": [0.3, 1, 4, 0.61928934, 0.435, 0, 0.3, 0.7, 0.7, 0, 0.7, 0.6, 0, 1, 0.1, 0, 1, 1, 0.52, 0.777777778, 0.8, 0.8], "output": [0.38] },
{ "input": [0.8, 1, 4, 0.598984772, 0.69, 0, 0.8, 0.2, 0.2, 1, 0.2, 0.2, 0.2, 0.8, 0.3, 0, 0, 0.6, 0.86, 0.474747475, 0.8, 0.8], "output": [0.16] },
{ "input": [0.6, 2, 4, 0.269035533, 0.18, 0, 0.5, 0.5, 0.2, 0, 0.9, 0.1, 0.9, 0.8, 0.4, 1, 0, 0.4, 0.06, 0.636363636, 0.85, 0.7], "output": [0.4] },
{ "input": [0, 2, 4, 0.375634518, 0.945, 0, 0.3, 0.7, 0.3, 0, 0.8, 0.3, 0.1, 0.5, 0.5, 1, 1, 0.6, 0.82, 0.434343434, 0.5, 0.7], "output": [0.84] }]

net.train(dataBrain);
console.log("net:", net)
console.log('run1:', 100 * net.run([0.7, 1, 1, 0.147208122, 0.71, 0, 0.6, 0.4, 0.5, 0, 0.2, 0.2, 0.6, 0.1, 0, 1, 1, 0, 0.38, 0.939393939, 0.1, 0.6])[0]);
console.log('run2:', 100 * net.run([0.3, 1, 1, 0.52284264, 0.84, 0, 0, 1, 0.7, 0, 0.7, 0.5, 0.8, 0, 0.6, 1, 1, 0.6, 0.56, 0.727272727, 0.7, 0.3])[0]);
console.log('run3:', 100 * net.run([0.2, 1, 1, 0.172588832, 0.92, 0, 0.5, 0.5, 0.3, 1, 0.1, 0, 1, 0.5, 1, 1, 1, 1, 0.54, 0.383838384, 0.8, 0.1])[0]);
console.log('run4:', 100 * net.run([0.7, 2, 1, 0.172588832, 0.405, 0, 0, 1, 0.1, 0, 0.9, 0.6, 0.9, 0.6, 0.6, 0, 1, 0.8, 1, 0.858585859, 0.65, 0.6])[0]);

const { TabPane } = Tabs;
const { pageRank } = Algorithm;
const NODE_VISUAL_RANGE = [16, 64]; // 直径
const EDGE_VISUAL_RANGE = [1, 8];
let degreeMap = undefined;

const NodeImportance: React.FunctionComponent<NodeImportanceProps> = props => {
    const { controlledValues, visible: controlledVisible = true, onOpen, onVisibleChange = () => { } } = props;

    const { graph, data, updateHistory, updateContext } = useContext();
    const [visible, setVisible] = useState(false);
    const [currentAlgo, setCurrentAlgo] = useState('page-rank');
    const [degreeType, setDegreeType] = useState(['in', 'out']);
    const [result, setResult] = useState();
    const [reAnalyse, setReAnalyse] = useState(0);
    const [nodeProperties, setNodeProperties] = useState([]);
    const [edgeProperties, setEdgeProperties] = useState([]);
    const [resultPaneKey, setResultPaneKey] = useState('table');

    const [form] = Form.useForm();
    const { validateFields, resetFields } = form;
    const relation = { "外协厂": "1", "普通供应商": "2", "子公司": "3" };
    const classify = { "二级电机": "1", "一级电机": "2", "一级压缩机": "3", "二级压缩机": "4" }

    useEffect(() => {
        // 当前有配置节点重要性, 则在数据变换(扩展邻居、展开合并点)时, 重新映射
        if (result) {
            degreeMap = undefined;
            onAnalyse();
        }
        const nodePropertyMap = {};
        data.nodes.forEach(node => {
            Object.keys(node.data).forEach(key => (nodePropertyMap[key] = true));
        });
        setNodeProperties(Object.keys(nodePropertyMap));
        const edgePropertyMap = {};
        data.edges.forEach(edge => {
            Object.keys(edge.data).forEach(key => (edgePropertyMap[key] = true));
        });
        setEdgeProperties(Object.keys(edgePropertyMap));
    }, [data]);

    /**
     * 受控参数变化，自动进行分析
     * e.g. ChatGPT，历史记录模版等
     */
    useEffect(() => {
        if (controlledValues) {
            const { algorithm, degreeIn: controlledIn, degreeOut: controlledOut, ...formValues } = controlledValues;
            onOpen?.();
            const params = {};
            setCurrentAlgo(algorithm);
            const degreeIn = controlledIn === 'true';
            const degreeOut = controlledOut === 'true';
            if (degreeIn || degreeOut) {
                const controlledDegreeType = [];
                if (degreeIn) controlledDegreeType.push('in');
                if (degreeOut) controlledDegreeType.push('out');
                setDegreeType(controlledDegreeType);
                params.degreeType = controlledDegreeType;
            }
            setReAnalyse(Math.random());
            form.setFieldsValue(formValues);
            onAnalyse(algorithm, params);
        }
    }, [controlledValues]);

    const onRadioChange = e => {
        setCurrentAlgo(e.target.value);
    };

    const reset = () => {
        resetFields();
        resetMapping([], []);
        setResult(null);
        setCurrentAlgo('page-rank');
    };

    const showResult = res => {
        const formValues = form.getFieldsValue();
        const calcWay = formValues[`${currentAlgo}.calcway`];
        const mappingWay = formValues[`${currentAlgo}.mappingway`];

        if (!res?.nodes?.length || (currentAlgo === 'edge-property' && !res?.edges?.length)) {
            let message = '无结果';
            setResult({
                type: currentAlgo,
                calcWay,
                mappingWay,
                node: undefined,
                edge: undefined,
                message,
            });
            resetMapping([], []);
            return;
        }
        const resNodes = res.nodes;
        let sum = 0;
        resNodes.sort((a, b) => b.value - a.value);
        resNodes.forEach(item => {
            sum += item.value;
        });

        const minNode = resNodes[resNodes.length - 1];
        const maxNode = resNodes[0];
        const medianNode = resNodes[Math.ceil(resNodes.length / 2)] || maxNode;

        let edgeSum = 0;
        res.edges?.sort((a, b) => b.value - a.value);
        res.edges?.forEach(item => {
            edgeSum += item.value;
        });
        const minEdge = res.edges?.[res.edges.length - 1] || undefined;
        const maxEdge = res.edges?.[0] || undefined;
        const medianEdge = res.edges?.[Math.ceil(res.edges.length / 2)] || maxEdge;

        const analyseResult = {
            type: currentAlgo,
            calcWay,
            mappingWay,
            node: {
                min: {
                    id: minNode.id,
                    name: minNode.name,
                    value: +minNode.value.toFixed(6),
                },
                max: {
                    id: maxNode.id,
                    name: maxNode.name,
                    value: +maxNode.value.toFixed(6),
                },
                ave: {
                    id: undefined,
                    name: undefined,
                    value: +(sum / resNodes.length).toFixed(6),
                },
                median: {
                    id: medianNode.id,
                    name: medianNode.name,
                    value: +medianNode.value.toFixed(6),
                },
                data: resNodes,
            },
            edge: res.edges?.length
                ? {
                    min: minEdge
                        ? {
                            id: minEdge.id,
                            name: minEdge.name,
                            value: calcWay === 'count' ? minEdge.value : +minEdge.value?.toFixed(6),
                        }
                        : undefined,
                    max: maxEdge
                        ? {
                            id: maxEdge.id,
                            name: maxEdge.name,
                            value: calcWay === 'count' ? minEdge.value : +maxEdge.value?.toFixed(6),
                        }
                        : undefined,
                    ave: {
                        id: undefined,
                        name: undefined,
                        value: +(edgeSum / res.edges.length).toFixed(6),
                    },
                    median: medianEdge
                        ? {
                            id: medianEdge.id,
                            name: medianEdge.name,
                            value: calcWay === 'count' ? minEdge.value : +medianEdge.value?.toFixed(6),
                        }
                        : undefined,
                    data: res.edges,
                }
                : undefined,
        };
        mapGraph(analyseResult);
        setResult(analyseResult);
    };

    const mapGraph = res => {
        const { min: minNode, max: maxNode } = res.node;
        const nodeValueRange = maxNode.value - minNode.value || 1;
        const nodeVisualRange = NODE_VISUAL_RANGE[1] - NODE_VISUAL_RANGE[0];
        const mappedNodeIds = [];
        const positive = res.mappingWay !== MappingWay.Negative;
        res.node.data.forEach(node => {
            const nodeItem = graph.findById(node.id);
            if (nodeItem) {
                let size = positive
                    ? ((node.value - minNode.value) / nodeValueRange) * nodeVisualRange + NODE_VISUAL_RANGE[0]
                    : ((maxNode.value - node.value) / nodeValueRange) * nodeVisualRange + NODE_VISUAL_RANGE[0];
                // 所有的值都一样, 使所有节点使用默认大小
                if (minNode.value === maxNode.value) {
                    size = undefined;
                }

                const { type: shapeType, style, size: modelSize } = nodeItem.getModel();
                //@TODO  Graphin类型的节点，需要和G6的规范保持一致，后续技术做改造
                graph.updateItem(nodeItem, {
                    size,
                    oriSize: modelSize || style?.keyshape.size || 30,
                    // 兼容 graphin-circle
                    style: {
                        keyshape: {
                            size,
                        },
                        icon: {
                            size: size / 2,
                        },
                    },
                });
            }
            mappedNodeIds.push(node.id);
        });
        let mappedEdgeIds = [];
        if (res.edge && res.calcWay !== 'count') {
            const { min: minEdge, max: maxEdge } = res.edge;
            const edgeValueRange = maxEdge.value - minEdge.value || 1;
            const edgeVisualRange = EDGE_VISUAL_RANGE[1] - EDGE_VISUAL_RANGE[0];
            res.edge.data.forEach(edge => {
                const edgeItem = graph.findById(edge.id);
                // min === max 代表所有的值都一样, 使所有边使用默认大小
                if (minNode.value !== maxNode.value) {
                    let lineWidth = positive
                        ? ((edge.value - minEdge.value) / edgeValueRange) * edgeVisualRange + EDGE_VISUAL_RANGE[0]
                        : ((maxEdge.value - edge.value) / edgeValueRange) * edgeVisualRange + EDGE_VISUAL_RANGE[0];
                    lineWidth = lineWidth || 1;
                    if (edgeItem) {
                        const { size: modelSize, style = {} } = edgeItem.getModel();

                        //@TODO  Graphin类型的节点，需要和G6的规范保持一致，后续技术做改造
                        graph.updateItem(edgeItem, {
                            size: lineWidth,
                            oriSize: modelSize || style?.keyshape.size || 1,
                            // 兼容 graphin-line 类型边
                            style: {
                                keyshape: {
                                    lineWidth: lineWidth,
                                    ...(style.keyshape || {}),
                                },
                            },
                        });
                    }
                    mappedEdgeIds.push(edge.id);
                }
            });
        }
        resetMapping(mappedNodeIds, mappedEdgeIds);
    };

    const resetMapping = (mappedNodeIds, mappedEdgeIds) => {
        graph.getNodes().forEach(node => {
            const { id, oriSize } = node.getModel();
            if (oriSize && !mappedNodeIds?.includes(id)) {
                graph.updateItem(node, {
                    size: oriSize || 30,
                    oriSize: undefined,
                    // 兼容 graphin-circle
                    style: {
                        keyshape: {
                            size: oriSize || 30,
                        },
                        icon: {
                            size: oriSize / 2,
                        },
                    },
                });
            }
        });
        if (mappedEdgeIds) {
            graph.getEdges().forEach(edge => {
                const { id, oriSize, size, style = {} } = edge.getModel();
                if ((size !== 1 || style?.keyshape?.size !== 1) && !mappedEdgeIds?.includes(id)) {
                    graph.updateItem(edge, {
                        size: oriSize || 1,
                        oriSize: undefined,
                        // 兼容 graphin-line
                        style: {
                            keyshape: {
                                lineWidth: oriSize || 1,
                                ...(style.keyshape || {}),
                            },
                        },
                    });
                }
            });
        }
        graph.getEdges().forEach(edge => {
            edge.refresh();
        });
    };

    const onAnalyse = (algo, params = {}) => {
        if (!graph || graph.destroyed) {
            handleUpdateHistory(currentAlgo, {}, false, '图实例不存在');
            return;
        }
        validateFields().then(values => {
            let res: {
                nodes: any[];
                edges: any[];
            } = {
                nodes: [],
                edges: [],
            };
            const usingAlgo = algo || currentAlgo;
            switch (usingAlgo) {
                case 'page-rank': {
                    data.nodes.forEach(node => {
                        if (!isNaN(node.data.综合打分)) {
                            res.nodes.push({
                                id: node.id,
                                name: node.id,
                                /**value: node.data.FinalScore,*/
                                value: 100 * net.run([Number(node.data.合作时长 / 10), Number(relation[node.data.关系]), Number(classify[node.data.服务业务]), Number((node.data.最新定价 - 401) / 197), Number((node.data.上一季度价格 - 400) / 200), Number(node.data.首家定价), Number((node.data.检验批数 - 90) / 10), Number(node.data.批检不合格率 * 10), Number(node.data.下线率 * 10), Number(node.data.质量专项要求), Number(node.data.重大违约次数 / 10), Number(node.data.整改失效性次数 / 10), Number(node.data.严重不符合项数 / 10), Number(node.data.一般不符合项未整改) / 10, Number(node.data.建议项未整改) / 10, Number(node.data.质量协议签订), Number(node.data.激励项目), Number((node.data.订单完全执行率 - 95) / 5), Number(node.data.订单响应周期) / 100, Number(node.data.供货编码数量 / 100), Number(node.data.基地覆盖率 / 100), Number(node.data.应急得分 / 100)])[0],
                                originProperties: node,
                            });
                        };
                    });
                    graph.cfg.data.nodes.forEach(node => {
                        if (!isNaN(node.data.综合打分)) {
                            node.data.综合打分 = 100 * net.run([Number(node.data.合作时长 / 10), Number(relation[node.data.关系]), Number(classify[node.data.服务业务]), Number((node.data.最新定价 - 401) / 197), Number((node.data.上一季度价格 - 400) / 200), Number(node.data.首家定价), Number((node.data.检验批数 - 90) / 10), Number(node.data.批检不合格率 * 10), Number(node.data.下线率 * 10), Number(node.data.质量专项要求), Number(node.data.重大违约次数 / 10), Number(node.data.整改失效性次数 / 10), Number(node.data.严重不符合项数 / 10), Number(node.data.一般不符合项未整改) / 10, Number(node.data.建议项未整改) / 10, Number(node.data.质量协议签订), Number(node.data.激励项目), Number((node.data.订单完全执行率 - 95) / 5), Number(node.data.订单响应周期) / 100, Number(node.data.供货编码数量 / 100), Number(node.data.基地覆盖率 / 100), Number(node.data.应急得分 / 100)])[0];
                        };
                    });
                    /**updateContext(graph => {
                        graph.cfg.data.nodes.forEach(node => {
                            if (!isNaN(node.data.综合打分)) {
                                node.data.综合打分 = 100 * net.run([Number(node.data.合作时长 / 10), Number(relation[node.data.关系]), Number(classify[node.data.服务业务]), Number((node.data.最新定价 - 401) / 197), Number((node.data.上一季度价格 - 400) / 200), Number(node.data.首家定价), Number((node.data.检验批数 - 90) / 10), Number(node.data.批检不合格率 * 10), Number(node.data.下线率 * 10), Number(node.data.质量专项要求), Number(node.data.重大违约次数 / 10), Number(node.data.整改失效性次数 / 10), Number(node.data.严重不符合项数 / 10), Number(node.data.一般不符合项未整改) / 10, Number(node.data.建议项未整改) / 10, Number(node.data.质量协议签订), Number(node.data.激励项目), Number((node.data.订单完全执行率 - 95) / 5), Number(node.data.订单响应周期) / 100, Number(node.data.供货编码数量 / 100), Number(node.data.基地覆盖率 / 100), Number(node.data.应急得分 / 100)])[0];
                            };
                        });
                    });*/
                    break;
                }
                case 'degree': {
                    const { degreeType: propsDegreeType } = params;
                    const usingDegreeType = propsDegreeType || degreeType;
                    const degree = usingDegreeType.length === 2 ? 'total' : usingDegreeType[0] || 'in';
                    degreeMap = getDegreeMap(data, degreeMap);
                    graph.getNodes().forEach(node => {
                        const model = node.getModel();
                        if (degreeMap[model.id]) {
                            res.nodes.push({
                                id: model.id,
                                name: model.id,
                                value:
                                    degree !== 'total' ? degreeMap[model.id][degree] : degreeMap[model.id].in + degreeMap[model.id].out,
                                originProperties: model,
                            });
                        }
                    });
                    break;
                }
                case 'node-property': {
                    const selectedNodeProperty = values['node-property.property'];
                    console.log('selectedNodeProperty:', 'node-property.property');
                    if (!selectedNodeProperty) {
                        return;
                    }
                    /**使用node前需要这样使用 */
                    data.nodes.forEach(node => {
                        console.log('sele:', selectedNodeProperty);
                        /**
                         * 就是一个中文或者英文的属性名字
                         */
                        const propertyValue = node.data?.[selectedNodeProperty];
                        const value = propertyValue === '' ? undefined : +propertyValue;
                        if (!isNaN(value) && graph.findById(node.id)) {
                            res.nodes.push({
                                id: node.id,
                                name: node.id,
                                value,
                                originProperties: node,
                            });
                        }
                    });
                    break;
                }
                case 'edge-property': {
                    const selectedEdgeProperty = values['edge-property.property'];
                    const calcWay = values['edge-property.calcway'];
                    if (!selectedEdgeProperty) {
                        return;
                    }
                    const nodeValueMap = {};
                    graph.getEdges().forEach(edgeItem => {
                        const edge = edgeItem.getModel();
                        const propertyValue = edge.data?.[selectedEdgeProperty];
                        if (propertyValue === undefined) return;

                        if (calcWay === 'sort') {
                            const value = propertyValue === '' ? undefined : +propertyValue;
                            if (!isNaN(value)) {
                                nodeValueMap[edge.source] = (nodeValueMap[edge.source] || 0) + value;
                                nodeValueMap[edge.target] = (nodeValueMap[edge.target] || 0) + value;
                                res.edges.push({
                                    id: edge.id,
                                    name: edge.id,
                                    value,
                                    originProperties: edge,
                                });
                            }
                        } else {
                            if (!nodeValueMap[edge.source]?.includes?.(propertyValue)) {
                                if (!nodeValueMap[edge.source]) {
                                    nodeValueMap[edge.source] = [];
                                }
                                nodeValueMap[edge.source].push(propertyValue);
                            }
                            if (!nodeValueMap[edge.target]?.includes?.(propertyValue)) {
                                if (!nodeValueMap[edge.target]) {
                                    nodeValueMap[edge.target] = [];
                                }
                                nodeValueMap[edge.target].push(propertyValue);
                            }
                            res.edges.push({
                                id: edge.id,
                                name: edge.id,
                                value: propertyValue,
                                originProperties: edge,
                            });
                        }
                    });

                    data.nodes.forEach(node => {
                        if (!graph.findById(node.id)) {
                            return;
                        }
                        if (calcWay === 'sort') {
                            if (nodeValueMap[node.id] === undefined || !isNaN(nodeValueMap[node.id])) {
                                res.nodes.push({
                                    id: node.id,
                                    name: node.id,
                                    value: nodeValueMap[node.id] || 0,
                                    originProperties: node,
                                });
                            }
                        } else {
                            res.nodes.push({
                                id: node.id,
                                name: node.id,
                                value: nodeValueMap[node.id]?.length || 0,
                                values: nodeValueMap[node.id],
                                originProperties: node,
                            });
                        }
                    });
                    break;
                }
                default: {
                    break;
                }
            }
            showResult(res);

            handleUpdateHistory(currentAlgo, values, true, '');
        });
        setResultPaneKey('table');
    };

    const handleUpdateHistory = (algorithm, formValues, success, msg) => {
        updateHistory({
            componentId: 'NodeImportance',
            type: 'analyse',
            subType: '节点重要性',
            statement: `算法 ${algorithm}`,
            success,
            errorMsg: msg,
            params: {
                algorithm,
                degreeIn: String(degreeType?.includes('in')),
                degreeOut: String(degreeType?.includes('out')),
                ...formValues,
            },
        });
    };

    const getResultTitle = () => {
        const formValues = form.getFieldsValue();
        const nodeProperty = formValues['node-property.property'];
        const edgeProperty = formValues['edge-property.property'];
        if (result?.type === 'node-property') {
            return <>{nodeProperty}&nbsp;-&nbsp;排序</>;
        }
        if (result?.type === 'edge-property') {
            return (
                <>
                    {edgeProperty}
                    &nbsp;-&nbsp;{locale[result?.calcWay]}
                </>
            );
        }
        return locale[result?.type];
    };

    const getStatistic = (type, itemType = 'node') => {
        const value =
            type === 'ave'
                ? `${result[itemType][type].value}`
                : `${result[itemType][type].value} (${result[itemType][type].name})`;
        const fittedValue = fittingString(value, 250, 14);
        return (
            <>
                {locale[type]}:&nbsp;&nbsp;
                <span className="result-statistic-value">
                    <Tooltip title={fittedValue.includes('…') ? value : ''}>{fittedValue}</Tooltip>
                </span>
            </>
        );
    };

    const getResultPane = paneType => {
        const formValues = form.getFieldsValue();
        const edgeType = formValues[`${currentAlgo}.edgeType`];
        const failedMessage = result?.node ? undefined : <p className="result-message">{result?.message}</p>;
        const resultBlock =
            paneType === 'table' ? (
                <ResultTable
                    data={result}
                    form={form}
                    currentAlgo={currentAlgo}
                    reAnalyse={reAnalyse}
                    nodeProperties={nodeProperties}
                />
            ) : (
                <ResultPlot data={result} currentAlgo={currentAlgo} edgeType={edgeType} />
            );
        return (
            <div className="result-wrapper">
                <div className="result-title">{getResultTitle()}</div>
                {failedMessage || (
                    <div className="result-statistic">
                        <Row>
                            <Col span={11}>{getStatistic('ave')}</Col>
                            <Col span={11}>{getStatistic('median')}</Col>
                        </Row>
                        <Row style={{ marginTop: '16px' }}>
                            <Col span={11}>{getStatistic('max')}</Col>
                            <Col span={11}>{getStatistic('min')}</Col>
                        </Row>
                    </div>
                )}
                {!failedMessage && resultBlock}
            </div>
        );
    };

    const processRow = row => {
        let finalVal = '';
        Object.values(row).forEach((value, i) => {
            let res = (value === undefined ? '' : value).toString().replace(/"/g, '""');
            if (res.search(/("|,|\n)/g) >= 0) res = '"' + res + '"';
            if (i > 0) finalVal += ',';
            finalVal += res;
        });
        return finalVal;
    };

    const downloadCSV = itemType => {
        const list = result?.[itemType]?.data;
        if (!list) {
            return;
        }
        const header = 'id,name,dataType,value';
        const csvStr = list.map(processRow).join('\n');
        const a = document.createElement('a');
        a.href = 'data:text/csv;charset=utf-8,' + encodeURI(`${header}\n${csvStr}`);
        a.download = `node-importance-${itemType}.csv`; //这里替换为你需要的文件名
        a.click();
    };

    const algoSelections = [
        {
            name: 'page-rank',
            content: <></>,
        },
        {
            name: 'degree',
            content: (
                <Checkbox.Group
                    className="algo-body"
                    options={[
                        {
                            label: '入度',
                            value: 'in',
                        },
                        {
                            label: '出度',
                            value: 'out',
                        },
                    ]}
                    defaultValue={['in', 'out']}
                    onChange={setDegreeType}
                    value={degreeType}
                    style={{ display: currentAlgo === 'degree' ? 'inline-flex' : 'none' }}
                />
            ),
        },
        {
            name: 'node-property',
            content: (
                <PropertyContent
                    type="node"
                    form={form}
                    visible={currentAlgo === 'node-property'}
                    properties={nodeProperties}
                // fetchSchemaProperties={fetchSchemaProperties}
                />
            ),
        },
        {
            name: 'edge-property',
            content: (
                <PropertyContent
                    type="edge"
                    form={form}
                    visible={currentAlgo === 'edge-property'}
                    properties={edgeProperties}
                // fetchSchemaProperties={fetchSchemaProperties}
                />
            ),
        },
    ];

    const visibility = visible && controlledVisible;
    const handleClick = () => {
        setVisible(true);
        onVisibleChange?.(true);
    };

    return (
        <div style={props.style}>
            <div className="content-wrapper" id="select-drop-down-area">
                <div className="title-wrapper">
                    <span className="title">算法</span>
                </div>
                <Form form={form}>
                    <Radio.Group onChange={onRadioChange} value={currentAlgo}>
                        {algoSelections.map(selection => (
                            <div key={selection.name}>
                                <Radio value={selection.name} className="algo-radio">
                                    <div className="algo-title">
                                        <span className="algo-name">{locale[selection.name]}</span>
                                        <span className="algo-tip">({locale[`${selection.name}-tip`]})</span>
                                    </div>
                                </Radio>
                                {currentAlgo === selection.name && selection.content}
                            </div>
                        ))}
                    </Radio.Group>
                </Form>
            </div>

            <Row>
                <Col span={16}>
                    <Button
                        className="button"
                        type="primary"
                        onClick={() => {
                            setReAnalyse(Math.random());
                            onAnalyse();
                        }}
                    >
                        分析
                    </Button>
                </Col>
                <Col offset="2" span={6} style={{ textAlign: 'right', lineHeight: '56px' }}>
                    <Button className="button" danger onClick={reset} icon={<DeleteOutlined />}></Button>
                </Col>
            </Row>
            {result && (
                <Tabs
                    defaultActiveKey="table"
                    activeKey={resultPaneKey}
                    onChange={setResultPaneKey}
                    tabBarExtraContent={{
                        right: (
                            <Tooltip title="下载CSV" placement="topRight">
                                <i
                                    className="iconfont icon-download"
                                    onClick={() => {
                                        downloadCSV('node');
                                        downloadCSV('edge');
                                    }}
                                />
                            </Tooltip>
                        ),
                    }}
                >
                    <TabPane tab="结果列表" key="table">
                        {getResultPane('table')}
                    </TabPane>
                    <TabPane tab="统计图表" key="plot">
                        {getResultPane('plot')}
                    </TabPane>
                </Tabs>
            )}
        </div>
    );
};

export default NodeImportance;
